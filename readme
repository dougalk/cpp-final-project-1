#include <iostream>
#include "Game.h"
#include "GameComponent.h"
#include "DrawableGameComponent.h"

// // Standalone initialization function
void InitialiseGame()
{
    // Add initialization code here
    std::cout << "Game initialized" << std::endl;

}

void TerminateGame()
{
    // Add termination code here
    std::cout << "Game terminated" << std::endl;
}


int main()
{
    // Set up the random number generator
    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    // link the standalone functions to the function pointers
    initialise = &InitialiseGame;
    terminate = &TerminateGame;

    //link the standalone functions to the function pointers
    // SetInitialise(&InitialiseGame);
    // SetTerminate(&TerminateGame);




    // Create a new Game object
    Game game;

    // Initialise the game
    InitialiseGame(game);

    // Run the game
    game.Run();

    // Terminate the game
    TerminateGame();

    // // Set the initialization function
    // game.SetInitialise(&Initialize);

    // // Create some GameComponents and add them to the game
    // GameComponent* component1 = new GameComponent();
    // game.Add(component1);

    // DrawableGameComponent* component2 = new DrawableGameComponent();
    // game.Add(component2);

    // // TODO: Add game loop code here

    // // Cleanup
    // delete component1;
    // delete component2;

    return 0;
}

FROM GAME.H

// how to define classes
// Each header file would contain the corresponding class declaration and any related declarations,
// and each source file would contain the corresponding class implementation and any related function definitions.


// example class

// class Person {
// public:
//     // Constructor
//     Person(const std::string& name, int age) : name(name), age(age) {}
    
//     // Member function
//     void sayHello() {
//         std::cout << "Hello, my name is " << name << " and I am " << age << " years old." << std::endl;
//     }
    
// private:
//     // Data members
//     std::string name;
//     int age;
// };

// In this example, we define a class called Person with two data members (name and age) 
//and a member function (sayHello). 
//The constructor takes two parameters (name and age) and initializes the corresponding data members. 
//The member function sayHello prints a greeting message to the console using the name and age data members.



// to use this class we can create opbjects of type Person

// Person john("John", 30);
// john.sayHello();

// This will create a Person object named john with the name "John" and age 30, 
// and call the sayHello member function to print the greeting message.

//full example


// #ifndef GAME_H
// #define GAME_H

// #include <vector>

// // Define the FP typedef representing a type of function that returns void and has no parameters
// typedef void (*FP)();

// // Forward declaration of the GameComponent class
// class GameComponent;

// // Forward declaration of the DrawableGameComponent class
// class DrawableGameComponent;

// // Game class declaration
// class Game {
// public:
//     // Constructor and destructor
//     Game();
//     ~Game();

//     // Other member functions and data members...

//     // SetInitialise function to assign the address of a standalone function to the initialise data member
//     void SetInitialise(FP initFunc);

//     // Add function to add a new GameComponent/DrawableGameComponent object to the components array
//     void Add(GameComponent* component);
//     void Add(DrawableGameComponent* component);

//     //Add Run function 
//     void Run();

// private:
//     // Array of pointers to GameComponent objects
//     std::vector<GameComponent*> components;

//     // Number of components in the array
//     int componentCount;

//     // Pointer to a standalone initialization function
//     FP initialise;
// };

// #endif // GAME_H
